// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Worley3DTextureWithPoints

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture3D<float4> Result3D;
StructuredBuffer<float3> pointsA;
StructuredBuffer<float3> pointsB;
StructuredBuffer<float3> pointsC;

float textureSizeP;//Texture Size in pixels
int numCellsA;
int numCellsB;
int numCellsC;

float GetRandomIndexFromPoint(float3 p,int numOfCellsAxis)
{  
    return p.x + numOfCellsAxis * (p.y + numOfCellsAxis * p.z);
}

float GetWorleyDistFromCellNumWithPoints(uint3 id, float cellsNum, StructuredBuffer<float3> randomPoints)
{
    float3 st = id.xyz/float(textureSizeP); //convert pixel space into 0 to 1 coordinates
    st*=float(cellsNum);
   
    float3 iPos = floor(st); //get integer coords
    float3 fPos = frac(st); //get fractional coords


    float minDist=  1.0;  // minimum distance
    for(int z=-1; z<=1;++z)
    {
        for(int y=-1; y<=1;++y)
        {
            for(int x=-1; x<=1;++x)
            {
                float3 neighbourOffset= float3(float(x),float(y),float(z)); //get an offset for the 26 adjacent tiles + the center one
                float3 neighbourPos =iPos+neighbourOffset; //Position of the cell where we want to obtain the random point
            
                if(neighbourPos.x<0.0f) //Cannot do modulo if its a negative number
                {
                    neighbourPos.x=cellsNum-1.0;
                }

                if(neighbourPos.y<0.0f)//Cannot do modulo if its a negative number
                {
                    neighbourPos.y=cellsNum-1.0;
                }
                if(neighbourPos.z<0.0f)//Cannot do modulo if its a negative number
                {
                    neighbourPos.z=cellsNum-1.0;
                }

                neighbourPos= neighbourPos % cellsNum;
                float3 randPoint=randomPoints[GetRandomIndexFromPoint(neighbourPos,cellsNum)]; //take a random point given the position of the current tile + the offset of the neighbour we are checking as a seed
                float3 distV = neighbourOffset+randPoint - fPos; //we calculate the distance vector between the position in our tile and the position of the random point in the neighbouring tile
                float dist = length(distV); //we calculate the distance from the distance vector
                minDist= min(minDist,dist); //we take the minimum distance from all neighbours
            }
        }
    }

    return minDist;
}

[numthreads(8,8,8)]
void Worley3DTextureWithPoints (uint3 id : SV_DispatchThreadID)
{
    float layeredVal=0.0;
    layeredVal += GetWorleyDistFromCellNumWithPoints(id,float(numCellsA),pointsA)*0.625;
    layeredVal += GetWorleyDistFromCellNumWithPoints(id,float(numCellsB),pointsB)*0.25;
    layeredVal += GetWorleyDistFromCellNumWithPoints(id,float(numCellsC),pointsC)*0.125;
    layeredVal= 1-layeredVal;//we invert the distance
    
    Result3D[id.xyz] = float4(layeredVal,layeredVal,layeredVal,1.0);

}
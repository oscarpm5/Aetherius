// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
float textureSizeP;//Texture Size in pixels
float2 numCells;
float2 random2( float2 p ) 
{
    return frac(sin(float2(dot(p,float2(127.1,311.7)),dot(p,float2(269.5,183.3))))*43758.5453);
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!


    float2 st = id.xy/textureSizeP; //convert pixel space into 0 to 1 coordinates
    st.x*=numCells.x;
    st.y*=numCells.y;
   
    float2 iPos = floor(st); //get integer coords
    float2 fPos = frac(st); //get fractional coords


    float minDist=  1.0;  // minimum distance
    for(int y=-1; y<=1;++y)
    {
        for(int x=-1; x<=1;++x)
        {
            float2 neighbourOffset= float2(float(x),float(y)); //get an offset for the 9 adjacent tiles
            float randPoint=random2(iPos+neighbourOffset); //take a random point given the position of the current tile + the offset of the neighbour we are checking as a seed
            float2 distV = neighbourOffset+randPoint - fPos; //we calculate the distance vector between the position in our tile and the position of the random point in the neighbouring tile
            float dist = length(distV); //we calculate the distance from the distance vector
            minDist= min(minDist,dist); //we take the minimum distance from all neighbours
        }
    }
    minDist = 1-minDist; //we invert the distance
    
    Result[id.xy] = float4(minDist,minDist,minDist,1.0);

}

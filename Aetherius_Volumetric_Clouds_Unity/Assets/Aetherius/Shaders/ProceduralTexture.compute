// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Worley3DTextureWithPoints
#pragma kernel PerlinWorley3DTexture
#pragma kernel InitializeTexture
#pragma kernel GenerateDensityLUT
#pragma kernel GenerateWeatherMap

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture3D<float4> Result3D;
float4 channelToWriteTo;

StructuredBuffer<float3> pointsA;
StructuredBuffer<float3> pointsB;
StructuredBuffer<float3> pointsC;

int textureSizeP;//Texture Size in pixels
uint numCellsA;
uint numCellsB;
uint numCellsC;
float persistenceWorley;


int GetRandomIndexFromPoint(int3 p,int numOfCellsAxis)
{  
    return p.x + numOfCellsAxis * (p.y + numOfCellsAxis * p.z);
}

float GetWorleyDistFromCellNumWithPoints(uint3 id, uint cellsNum, StructuredBuffer<float3> randomPoints)
{
    float3 st = id.xyz/float(textureSizeP); //convert pixel space into 0 to 1 coordinates
    st*=cellsNum;
   
    float3 iPos = floor(st); //get integer coords
    float3 fPos = frac(st); //get fractional coords


    float minDist=  1.0;  // minimum distance
    for(int z=-1; z<=1;++z)
    {
        for(int y=-1; y<=1;++y)
        {
            for(int x=-1; x<=1;++x)
            {
                int3 neighbourOffset= int3(x,y,z); //get an offset for the 26 adjacent tiles + the center one
                int3 neighbourPos =iPos+neighbourOffset; //Position of the cell where we want to obtain the random point
            
                if(neighbourPos.x<0) //Cannot do modulo if its a negative number
                {
                    neighbourPos.x=cellsNum-1;
                }

                if(neighbourPos.y<0)//Cannot do modulo if its a negative number
                {
                    neighbourPos.y=cellsNum-1;
                }
                if(neighbourPos.z<0.)//Cannot do modulo if its a negative number
                {
                    neighbourPos.z=cellsNum-1;
                }

                neighbourPos= neighbourPos % cellsNum;
                float3 randPoint=randomPoints[GetRandomIndexFromPoint(neighbourPos,cellsNum)]; //take a random point given the position of the current tile + the offset of the neighbour we are checking as a seed
                float3 distV = neighbourOffset+randPoint - fPos; //we calculate the distance vector between the position in our tile and the position of the random point in the neighbouring tile
                float dist = length(distV); //we calculate the distance from the distance vector
                minDist= min(minDist,dist); //we take the minimum distance from all neighbours
            }
        }
    }

    return minDist;
}

[numthreads(8,8,8)]
void Worley3DTextureWithPoints (uint3 id : SV_DispatchThreadID)
{
    float amplitude=1.0;
    float totalAmplitude=0.0;

    float layeredVal=0.0;
    layeredVal += GetWorleyDistFromCellNumWithPoints(id,numCellsA,pointsA)*amplitude;
    totalAmplitude += amplitude;
    amplitude *=persistenceWorley;

    layeredVal += GetWorleyDistFromCellNumWithPoints(id,numCellsB,pointsB)*amplitude;
    totalAmplitude += amplitude;
    amplitude *=persistenceWorley;

    layeredVal += GetWorleyDistFromCellNumWithPoints(id,numCellsC,pointsC)*amplitude;
    totalAmplitude += amplitude;

    layeredVal = layeredVal/totalAmplitude;
    layeredVal= 1-layeredVal;//we invert the distance

    Result3D[id.xyz] = lerp(Result3D[id.xyz],float4(layeredVal,layeredVal,layeredVal,layeredVal),channelToWriteTo);

}

StructuredBuffer<float3> vecTable;

StructuredBuffer<int> permTable;
int octaves;
float persistencePerlin;
float lacunarity;
int gridSize;

uint GetpermutationIndexFromPos(int3 pos,uint permTableSize)
{
    uint index = permTable[(uint(pos.x) %permTableSize)];
    index= permTable[(uint(index+pos.y)%permTableSize)];
    index= permTable[(uint(index+pos.z)%permTableSize)];

    return index;
}

float3 GetGradientVectorFromPos(int3 pos,uint permTableSize)
{
    uint vecIndex=GetpermutationIndexFromPos(pos,permTableSize)%12;
    return vecTable[vecIndex];
}

float Fade(float t)
{
	return ((6.0*t - 15.0)*t + 10.0)*t*t*t;
}

float GetPerlinGradient(uint3 id,uint myGridSize)
{
    float3 st = id.xyz/float(textureSizeP); //convert pixel space into 0 to 1 coordinates
    st*=float(myGridSize);
   
    float3 iPos = floor(st); //get integer coords
    float3 fPos = frac(st); //get fractional coords

    float3 vecBLC = GetGradientVectorFromPos(int3(iPos.x,iPos.y,iPos.z)+int3(0,0,0),myGridSize);//bottom left close corner
    float3 vecBLF = GetGradientVectorFromPos(int3(iPos.x,iPos.y,iPos.z)+int3(0,0,1),myGridSize);//bottom left far corner
    float3 vecBRC = GetGradientVectorFromPos(int3(iPos.x,iPos.y,iPos.z)+int3(1,0,0),myGridSize);//bottom right close corner
    float3 vecBRF = GetGradientVectorFromPos(int3(iPos.x,iPos.y,iPos.z)+int3(1,0,1),myGridSize);//bottom right far corner
    float3 vecTLC = GetGradientVectorFromPos(int3(iPos.x,iPos.y,iPos.z)+int3(0,1,0),myGridSize);//top left close corner
    float3 vecTLF = GetGradientVectorFromPos(int3(iPos.x,iPos.y,iPos.z)+int3(0,1,1),myGridSize);//top left far corner
    float3 vecTRC = GetGradientVectorFromPos(int3(iPos.x,iPos.y,iPos.z)+int3(1,1,0),myGridSize);//top right close corner
    float3 vecTRF = GetGradientVectorFromPos(int3(iPos.x,iPos.y,iPos.z)+int3(1,1,1),myGridSize);//top right far corner

    float dotVecBLC = dot(vecBLC,fPos-float3(0.0,0.0,0.0));
    float dotVecBLF = dot(vecBLF,fPos-float3(0.0,0.0,1.0));
    float dotVecBRC = dot(vecBRC,fPos-float3(1.0,0.0,0.0));
    float dotVecBRF = dot(vecBRF,fPos-float3(1.0,0.0,1.0));
    float dotVecTLC = dot(vecTLC,fPos-float3(0.0,1.0,0.0));
    float dotVecTLF = dot(vecTLF,fPos-float3(0.0,1.0,1.0));
    float dotVecTRC = dot(vecTRC,fPos-float3(1.0,1.0,0.0));
    float dotVecTRF = dot(vecTRF,fPos-float3(1.0,1.0,1.0));
    
    float u = Fade(fPos.x); //we use this instead of a linear value to not have hard edges, we also use this instead of smoothstep as it has no discontinuities
    float v = Fade(fPos.y);
    float w = Fade(fPos.z);

    float dotVecBL = lerp(dotVecBLC,dotVecBLF,w);
    float dotVecBR = lerp(dotVecBRC,dotVecBRF,w);
    float dotVecTL = lerp(dotVecTLC,dotVecTLF,w);
    float dotVecTR = lerp(dotVecTRC,dotVecTRF,w);

    float dotVecB = lerp(dotVecBL,dotVecBR,u);
    float dotVecT = lerp(dotVecTL,dotVecTR,u);

    float finalPoint=lerp(dotVecB,dotVecT,v);

    return finalPoint;
}

float remap(float originalValue, float originalMin, float originalMax, float newMin, float newMax)
{
	return newMin + (((originalValue - originalMin) / (originalMax - originalMin)) * (newMax - newMin));
}

[numthreads(8,8,8)]
void PerlinWorley3DTexture(uint3 id : SV_DispatchThreadID)
{
    //Perlin
    float layeredValPerlin=0.0; 
    float amplitude=1.0;
    float totalAmplitude=0.0;
    float frequency = 1.0;
    float3 offset = float3(103.5,211.3,71.1);
    for(int i =0; i<octaves; ++i)
    {
        layeredValPerlin += GetPerlinGradient((id+offset),uint(gridSize*frequency))*amplitude;
        totalAmplitude += amplitude;
        amplitude *=persistencePerlin;
        frequency *= lacunarity;
    }
    layeredValPerlin = layeredValPerlin/totalAmplitude; //Normalize to -1,1
    //layeredValPerlin = 0.5+layeredValPerlin*0.5;//Normalize from -1,1 to 0,1

    //Worley
    amplitude=1.0;
    totalAmplitude=0.0;

    float layeredValWorley=0.0;
    layeredValWorley += GetWorleyDistFromCellNumWithPoints(id,numCellsA,pointsA)*amplitude;
    totalAmplitude += amplitude;
    amplitude *=persistenceWorley;

    layeredValWorley += GetWorleyDistFromCellNumWithPoints(id,numCellsB,pointsB)*amplitude;
    totalAmplitude += amplitude;
    amplitude *=persistenceWorley;

    layeredValWorley += GetWorleyDistFromCellNumWithPoints(id,numCellsC,pointsC)*amplitude;
    totalAmplitude += amplitude;

    layeredValWorley = layeredValWorley/totalAmplitude;
    layeredValWorley= 1-layeredValWorley;//we invert the distance


    //Perlin-Worley
    float perlinWorley = remap(layeredValWorley,layeredValPerlin-1.0,1.0,0.0,1.0);
    Result3D[id.xyz] = lerp(Result3D[id.xyz],float4(perlinWorley,perlinWorley,perlinWorley,perlinWorley),channelToWriteTo);

}

[numthreads(8,8,8)]
void InitializeTexture(uint3 id : SV_DispatchThreadID)
{
    Result3D[id.xyz]=float4(0.0,0.0,0.0,1.0);
}


RWTexture2D<float4> densityGradientTexture;
StructuredBuffer<float> densityPoints;
int gradientSize;

[numthreads(8,8,1)]
void GenerateDensityLUT(uint3 id : SV_DispatchThreadID)
{
    
    float density =densityPoints[id.y];
    densityGradientTexture[id.xy]= float4(density,density,density,1.0);
}

//Perlin
StructuredBuffer<float2> vecTableWMDensity;
StructuredBuffer<int> permTableWMDensity;
int gridSizeWMDensity;
int octavesWMDensity;
int texDim;
float persistenceWMDensityPerlin;
float lacunarityWMDensityPerlin;
//Worley
uint numWorleyCellsWMDensityA;
uint numWorleyCellsWMDensityB;
uint numWorleyCellsWMDensityC;

float persistenceWMDensityWorley;

StructuredBuffer<float2> pointsWorleyWMDensityA;
StructuredBuffer<float2> pointsWorleyWMDensityB;
StructuredBuffer<float2> pointsWorleyWMDensityC;


RWTexture2D<float4> result;

uint GetpermutationIndexFromPos2D(int2 pos,uint permTableSize)
{
    uint index = permTableWMDensity[(uint(pos.x) %permTableSize)];
    index= permTableWMDensity[(uint(index+pos.y)%permTableSize)];
    return index;
}

float2 GetGradientVectorFromPos2D(int2 pos,uint permTableSize)
{
    uint vecIndex=GetpermutationIndexFromPos2D(pos,permTableSize)%8;
    return vecTableWMDensity[vecIndex];
}

float GetPerlinGradient2D(uint2 id,uint myGridSize)
{
    float2 st = id.xy/float(texDim); //convert pixel space into 0 to 1 coordinates
    st*=float(myGridSize);
   
    float2 iPos = floor(st); //get integer coords
    float2 fPos = frac(st); //get fractional coords

    float2 vecBL = GetGradientVectorFromPos2D(int2(iPos.x,iPos.y)+int2(0,0),myGridSize);//bottom left corner
    float2 vecBR = GetGradientVectorFromPos2D(int2(iPos.x,iPos.y)+int2(1,0),myGridSize);//bottom right corner
    float2 vecTL = GetGradientVectorFromPos2D(int2(iPos.x,iPos.y)+int2(0,1),myGridSize);//top left corner
    float2 vecTR = GetGradientVectorFromPos2D(int2(iPos.x,iPos.y)+int2(1,1),myGridSize);//top right corner

    float dotVecBL = dot(vecBL,fPos-float2(0.0,0.0));
    float dotVecBR = dot(vecBR,fPos-float2(1.0,0.0));
    float dotVecTL = dot(vecTL,fPos-float2(0.0,1.0));
    float dotVecTR = dot(vecTR,fPos-float2(1.0,1.0));
    
    float u = Fade(fPos.x); //we use this instead of a linear value to not have hard edges, we also use this instead of smoothstep as it has no discontinuities
    float v = Fade(fPos.y);

    float dotVecB = lerp(dotVecBL,dotVecBR,u);
    float dotVecT = lerp(dotVecTL,dotVecTR,u);

    float finalPoint=lerp(dotVecB,dotVecT,v);

    return finalPoint;
}

int GetRandomIndexFromPoint2D(int2 p,int numOfCellsAxis)
{  
    return p.x + numOfCellsAxis * p.y ;
}


float GetWorleyDistFromCellNumWithPoints2D(uint2 id, uint cellsNum, StructuredBuffer<float2> randomPoints)
{
    float2 st = id.xy/float(texDim); //convert pixel space into 0 to 1 coordinates
    st*=cellsNum;
   
    float2 iPos = floor(st); //get integer coords
    float2 fPos = frac(st); //get fractional coords


    float minDist=  1.0;  // minimum distance
    
    for(int y=-1; y<=1;++y)
    {
        for(int x=-1; x<=1;++x)
        {
            int2 neighbourOffset= int2(x,y); //get an offset for the 8 adjacent tiles + the center one
            int2 neighbourPos =iPos+neighbourOffset; //Position of the cell where we want to obtain the random point
            
            if(neighbourPos.x<0) //Cannot do modulo if its a negative number
            {
                neighbourPos.x=cellsNum-1;
            }

            if(neighbourPos.y<0)//Cannot do modulo if its a negative number
            {
                neighbourPos.y=cellsNum-1;
            }
           

            neighbourPos= neighbourPos % cellsNum;
            float2 randPoint=randomPoints[GetRandomIndexFromPoint2D(neighbourPos,cellsNum)]; //take a random point given the position of the current tile + the offset of the neighbour we are checking as a seed
            float2 distV = neighbourOffset+randPoint - fPos; //we calculate the distance vector between the position in our tile and the position of the random point in the neighbouring tile
            float dist = length(distV); //we calculate the distance from the distance vector
            minDist= min(minDist,dist); //we take the minimum distance from all neighbours
        }
    }
    

    return minDist;
}


[numthreads(8,8,1)]
void GenerateWeatherMap(uint3 id : SV_DispatchThreadID)
{
    //Perlin
    float layeredValPerlin=0.0; 
    float amplitude=1.0;
    float totalAmplitude=0.0;
    float frequency = 1.0;
    float2 offset = float2(103.5,211.3);

    for(int i =0; i<octavesWMDensity; ++i)
    {
        layeredValPerlin += GetPerlinGradient2D((id.xy+offset),uint(gridSizeWMDensity*frequency))*amplitude;
        totalAmplitude += amplitude;
        amplitude *=persistenceWMDensityPerlin;
        frequency *= lacunarityWMDensityPerlin;
    }
    layeredValPerlin = layeredValPerlin/totalAmplitude;
    //layeredValPerlin = saturate(remap(layeredValPerlin,-1.0,1.0,0.0,1.0));

    //Worley
    amplitude=1.0;
    totalAmplitude=0.0;

    float layeredValWorley=0.0;
    layeredValWorley += GetWorleyDistFromCellNumWithPoints2D(id.xy,numWorleyCellsWMDensityA,pointsWorleyWMDensityA)*amplitude;
    totalAmplitude += amplitude;
    amplitude *=persistenceWMDensityWorley;

    layeredValWorley +=  GetWorleyDistFromCellNumWithPoints2D(id.xy,numWorleyCellsWMDensityB,pointsWorleyWMDensityB)*amplitude;
    totalAmplitude += amplitude;
    amplitude *= persistenceWMDensityWorley;

    layeredValWorley +=  GetWorleyDistFromCellNumWithPoints2D(id.xy,numWorleyCellsWMDensityC,pointsWorleyWMDensityC)*amplitude;
    totalAmplitude += amplitude;
    amplitude *= persistenceWMDensityWorley;



    layeredValWorley = layeredValWorley/totalAmplitude;
    layeredValWorley= 1-layeredValWorley;//we invert the distance

    float layeredValFinal = saturate(remap(layeredValWorley,layeredValPerlin-1.0,1.0,0.0,1.0));

    
   result[id.xy] = float4(layeredValFinal,0.0,0.0,1.0);
}